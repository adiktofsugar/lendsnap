#!/usr/bin/python3
import json, urllib.request, os, subprocess, time, re

sync_uri = 'http://%s:4001/v2/keys/services?recursive=true' % os.environ['ETCD_HOST']
wait_uri = sync_uri + "&wait=true"

def get_nodes(node):
    if "nodes" in node:
        nodes = []
        for node in node["nodes"]:
            nodes = nodes + get_nodes(node)
    else:
        nodes = [node]
    return nodes

def get_response(uri):
    raw_response = urllib.request.urlopen(uri)
    raw_response = raw_response.read().decode('utf-8')
    #print("raw response from %s - %s" % (uri, raw_response))
    if raw_response != "":
        response = json.loads(raw_response)
        node = response["node"]
        action = response["action"]
        nodes = get_nodes(node)
    else:
        action = "none"
        nodes = []
    return {
        "action": action,
        "nodes": nodes
    }

def update_nginx_confs(nodes=[], action="set"):
    changes = []
    for node in nodes:
        key = node["key"].replace('/services/', '')
        conf_file_path = '/etc/nginx/proxies/%s.conf' % key
        template_file_path = '/var/lendsnap/nginx-proxy/proxy-templates/%s.conf' % key

        print("updating %s" % key)
        if os.path.exists(template_file_path) == False:
            print("..doesnt exist")
            continue

        if action == "set":
            print("..setting")
            node_value = json.loads(node["value"])
            real_conf_file = open(conf_file_path, 'w+')
            template_conf_file = open(template_file_path, 'r')

            new_conf_file_contents = template_conf_file.read()
            for node_value_key, node_value_value in node_value.items():
                new_conf_file_contents = \
                    new_conf_file_contents.replace('__%s__' % node_value_key, str(node_value_value))
            real_conf_file_contents = real_conf_file.read()
            if real_conf_file_contents == new_conf_file_contents:
                next
            real_conf_file.write(new_conf_file_contents)
            real_conf_file.close()
            changes.append("set %s" % key)
        
        elif action == "rm" or action == "expire":
            print("..removing")
            try:
                os.remove(conf_file_path)
                changes.append("rm %s" % key)
            except IOError:
                pass

    if len(changes) > 0:
        print("changes %s" % ",".join(changes))
        subprocess.check_call("sv restart nginx", shell=True)

initial_response = get_response(sync_uri)
update_nginx_confs(initial_response["nodes"], "set")

def listen_and_update_nginx_confs():
    print("listening...")
    updated_response = get_response(wait_uri)
    update_nginx_confs(updated_response["nodes"], updated_response["action"])
    listen_and_update_nginx_confs()
listen_and_update_nginx_confs()
